syntax = "proto3";

package grpckeystore;

service GRPCKeyStore {

    //
    // Keys can be established via one of two methods:
    // If the key pair is generated by the remote store,
    // GenerateKey/AssociateKey is used.
    // If the key is generated by notary, AddKey is used.
    //

    // GenerateKey allows the key store to provide a key it has
    // generated.  This allows a key store to provide signing services
    //  and never divulge private key information.
    // (GenerateKey/AssociateKey is an alternative to AddKey)
    rpc GenerateKey (GenerateKeyReq) returns (GenerateKeyRsp) {
    }

    // AssociateKey follows a successful GenerateKey.  It allows notary to
    // inform the key store or the KeyId that is associated with this key
    rpc AssociateKey (AssociateKeyReq) returns (AssociateKeyRsp) {
    }

    // AddKey allows a key generated by Notary to be saved in the key store.
    // AddKey is an alternative to the GenerateKey/AssociateKey sequence.
    rpc AddKey (AddKeyReq) returns (AddKeyRsp) {
    }

    // GetKey retrieves a stored public key from the key store
    rpc GetKey (GetKeyReq) returns (GetKeyRsp) {
    }

    // ListKeys retrieves all keys available in the key store
    rpc ListKeys (ListKeysReq) returns (ListKeysRsp) {
    }

    // RemoveKey removes a key from the keystore
    rpc RemoveKey (RemoveKeyReq) returns (RemoveKeyRsp) {
    }

    // Sign a message with the specified key
    rpc Sign (SignReq) returns (SignRsp) {
    }
}

message GenerateKeyReq {
    string Gun = 1;          // see notary/tuf/data/types.go -> GUN type
    string Role = 2;         // see notary/tuf/data/types.go -> TUFTypes
}

message GenerateKeyRsp {
    string RemoteKeyId = 1; // optional remote identifier provided by key store
    bytes PublicKey = 2;    // ASN.1 encoded public key provided by key store
    string Algorithm = 3;    // see notary/tuf/data/types.go -> Key types
    string SignatureAlgorithm = 4; // see notary/tuf/data/types.go -> Signature types
}

message AssociateKeyReq {
    string RemoteKeyId = 1;
    string KeyId = 2;
}

message AssociateKeyRsp {
}

message AddKeyReq {
    string KeyId = 1;
    string Gun = 2;
    string Role = 3;
    string Algorithm = 4;
    string SignatureAlgorithm = 5;
    bytes PublicKey = 6;
    bytes PrivateKey = 7;
}

message AddKeyRsp {
    string RemoteKeyId = 1;
}

message GetKeyReq {
    string KeyId = 1;
    string RemoteKeyId = 2;
}

message GetKeyRsp {
    string Role = 1;
    string Algorithm = 2;
    string SignatureAlgorithm = 3;
    bytes PublicKey = 4;
}

message ListKeysReq {}

message ListKeysRsp {
    message KeyInfo {
        string KeyId = 1;
        string RemoteKeyId = 2;
        string Gun = 3;
        string Role = 4;

    }
    repeated KeyInfo KeyData = 1;
}

message RemoveKeyReq {
    string KeyId = 1;
    string RemoteKeyId = 2;
}

message RemoveKeyRsp {
}

message SignReq {
    string KeyId = 1;
    string RemoteKeyId = 2;
    bytes Message = 3;
}

message SignRsp {
    bytes Signature = 1;
}
